---
description: 
globs: 
alwaysApply: true
---
# 股票分析系统架构规范

## 项目结构

```
.
├── analysis/            # 分析模块
│   ├── buypoints/       # 买点分析
│   └── market/          # 市场分析
├── api/                 # 外部API接口实现
├── bin/                 # 可执行脚本
├── config/              # 配置管理模块
├── data/                # 数据目录
│   └── result/          # 结果数据
├── db/                  # 数据库接口模块
├── doc/                 # 文档目录
│   ├── 使用指南/         # 系统使用相关指南
│   ├── 公式集/           # 交易和选股公式集合
│   ├── 回测文档/         # 回测系统相关文档
│   ├── 指标文档/         # 技术指标实现和使用文档
│   ├── 需求文档/         # 系统需求规格说明
│   └── 系统设计/         # 系统架构和设计方案
├── enums/               # 枚举定义模块
├── formula/             # 公式计算模块
├── indicators/          # 技术指标模块
├── logs/                # 日志目录
│   └── archive/         # 日志存档
├── scripts/             # 脚本工具
│   ├── backtest/        # 回测脚本
│   ├── sql/             # SQL脚本
│   └── utils/           # 工具脚本
├── sql/                 # SQL文件
├── strategy/            # 选股策略模块
├── tests/               # 测试模块
└── utils/               # 工具模块
```

## 编码规范

### 命名规范

1. 类名：使用大驼峰命名法（如`BaseStrategy`、`MomentumStrategy`）
2. 函数/方法名：使用小写字母加下划线（如`get_logger`、`parse_date`）
3. 变量名：使用小写字母加下划线（如`stock_code`、`output_dir`）
4. 常量名：使用大写字母加下划线（如`GLOBAL_DATE`）
5. 文件名：使用小写字母加下划线（如`file_utils.py`、`date_utils.py`）
6. 包名：使用全小写（如`utils`、`indicators`）

### 注释规范
1. 模块级别注释：使用三引号，描述模块功能
2. 类注释：使用三引号，描述类的功能和使用方法
3. 方法注释：使用三引号，包括功能描述、参数、返回值和异常说明
4. 使用Google风格的文档字符串格式

### 模块组织

1. 配置管理：所有配置统一在`config`模块管理
2. 数据库操作：所有数据库操作通过`db`模块的单例模式管理
3. 文件路径：使用`utils.path_utils`模块管理所有文件路径
4. 日志记录：使用`utils.logger`模块统一日志记录

## 架构规范

### 包路径规范

1. **可执行脚本规范**
   - 所有可执行脚本放置在`bin`目录下
   - 通过在脚本头部添加`root_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))`将项目根目录添加到Python路径
   - 主程序入口为`bin/main.py`
   - 选股功能入口为`bin/stock_select.py`

2. **分析模块规范**
   - 市场分析相关代码放置在`analysis/market`目录下
   - 买点分析相关代码放置在`analysis/buypoints`目录下
   - 分析工具应保持业务功能独立，不应直接修改数据库

3. **数据文件规范**
   - 结果数据放置在`data/result`目录下
   - 日志文件放置在`logs`目录下，归档日志放置在`logs/archive`目录下
   - SQL文件放置在`sql`目录下，SQL脚本放置在`scripts/sql`目录下

4. **工具脚本规范**
   - 通用工具脚本放置在`scripts/utils`目录下
   - 回测相关脚本放置在`scripts/backtest`目录下
   - SQL相关脚本放置在`scripts/sql`目录下

5. **模块导入规范**
   - 优先使用绝对导入而非相对导入
   - 导入顺序：标准库 > 第三方库 > 项目内模块
   - 项目内模块导入时使用完整路径，如`from db.clickhouse_db import get_clickhouse_db`

6. **路径引用规范**
   - 使用`os.path.join`连接路径，避免直接字符串拼接
   - 使用`utils.path_utils`中的函数获取标准化路径
   - 配置文件路径统一指向`config`目录
   - 数据文件路径统一指向`data`目录及其子目录

7. **文档规范**
   - 使用指南文档：放置在`doc/使用指南/`目录下，包含系统各功能模块的使用方法
   - 公式集文档：放置在`doc/公式集/`目录下，包含交易策略和选股公式
   - 回测文档：放置在`doc/回测文档/`目录下，包含回测系统的使用方法和案例分析
   - 指标文档：放置在`doc/指标文档/`目录下，包含技术指标的实现原理和使用方法
   - 需求文档：放置在`doc/需求文档/`目录下，包含系统需求规格说明
   - 系统设计文档：放置在`doc/系统设计/`目录下，包含系统架构和详细设计方案

### 配置管理

1. 避免硬编码，配置项应放在`config`模块中
2. 通过`get_config`函数获取配置项
3. 支持配置文件覆盖默认配置
4. 敏感信息（如密码）必须加密存储
5. 支持从环境变量读取配置
6. 实现配置验证机制，确保必要配置存在
7. 提供默认配置，确保系统能够运行
8. 使用递归合并方式处理配置嵌套

### 数据库设计

1. 使用单例模式管理数据库连接
2. 数据库操作封装在`DBManager`类中
3. 数据库密码通过环境变量或加密配置提供
4. 实现连接池管理，优化性能
5. 提供事务支持和异常回滚机制

### 类设计

1. 类变量与实例变量分离，避免数据共享问题
2. 使用抽象基类定义接口（如`BaseStrategy`、`BaseIndicator`）
3. 工厂模式创建对象（如`StrategyFactory`、`IndicatorFactory`）
4. 实现单一职责原则，一个类只负责一项功能
5. 使用组合优于继承的设计原则
6. 提供序列化和反序列化方法

### 异常处理

1. 使用`try-except`包装可能出错的操作
2. 记录异常信息到日志
3. 提供安全执行方法（如`safe_run`）
4. 使用自定义异常类区分不同类型的错误
5. 使用装饰器简化异常处理逻辑
6. 实现优雅的故障恢复机制

### 路径管理

1. 使用`path_utils`模块管理所有文件路径
2. 避免直接拼接字符串作为路径
3. 所有路径获取通过函数接口暴露
4. 支持相对路径和绝对路径转换
5. 确保路径存在，自动创建必要的目录

### 选股策略

1. 所有策略继承自`BaseStrategy`抽象基类
2. 实现必要的抽象方法（如`select`）
3. 通过`StrategyFactory`创建和管理策略
4. 策略参数可配置化，支持从配置文件读取
5. 支持策略组合和多策略并行执行
6. 提供策略性能评估和回测功能

### 技术指标

1. 所有指标继承自`BaseIndicator`抽象基类
2. 通过`IndicatorFactory`创建和管理指标
3. 使用统一的公共函数库实现基础计算
4. 将指标类型定义为枚举，便于管理
5. 支持指标参数的动态配置
6. 实现指标缓存机制，避免重复计算
7. 提供指标可视化和信号生成功能

### 工具类

1. 日期工具：`date_utils.py`
2. 文件工具：`file_utils.py`
3. 路径工具：`path_utils.py`
4. 日志工具：`logger.py`
5. 缓存工具：`cache.py`
6. 装饰器工具：`decorators.py`，提供通用功能装饰器
7. 加密工具：`crypto_utils.py`，处理敏感信息加密

### 枚举定义

所有枚举类型定义在`enums`包下，如：
1. 行业枚举：`industry.py`
2. K线周期枚举：`kline_period.py`
3. 指标类型枚举：`indicator_types.py`
4. 交叉类型枚举：`cross_types.py`
5. 趋势类型枚举：`trend_types.py`

### 测试规范

1. 单元测试：对独立组件进行测试，位于`tests/unit/`目录
2. 集成测试：测试组件间协作，位于`tests/integration/`目录
3. 使用`unittest`框架编写测试用例
4. 所有公共API必须有对应的单元测试
5. 测试应覆盖正常流程和异常情况
6. 使用模拟数据进行测试，不依赖外部资源
7. 每次代码修改后必须运行测试套件

### 日志规范

1. 使用分级日志系统，分为DEBUG、INFO、WARNING、ERROR、CRITICAL
2. 通过名称获取日志器，实现模块级日志隔离
3. 支持日志文件轮转，控制日志文件大小
4. 实现不同模块的日志分流到不同文件
5. 提供统一的日志格式和时间戳
6. 日志中应包含足够的上下文信息
7. 使用装饰器简化日志记录

### 装饰器应用

1. 异常处理装饰器：捕获并记录异常
2. 计时装饰器：记录函数执行时间
3. 缓存装饰器：缓存函数结果，提高性能
4. 重试装饰器：失败后自动重试
5. 验证装饰器：验证输入参数和数据结构
6. 日志装饰器：记录函数调用和返回值
7. 安全执行装饰器：确保函数安全执行

### 安全规范

1. 敏感信息必须加密存储
2. 使用环境变量传递关键配置
3. 加密密钥妥善保管，不纳入版本控制
4. 实现最小权限原则
5. 用户输入必须验证和清洗
6. API接口需要认证和授权
7. 数据传输采用安全协议

### 数据规范
1. 数据都通过 clickhouse 数据库查询，禁止使用模拟数据

### 文档内容规范

1. **使用指南文档**
   - 系统功能模块的使用说明
   - 操作流程和步骤描述
   - 常见问题和解决方案
   - 面向最终用户的说明文档

2. **公式集文档**
   - 交易和选股公式的详细说明
   - 公式参数说明和使用场景
   - 公式实现的具体代码
   - 公式的应用案例和效果分析

3. **回测文档**
   - 回测系统的使用方法
   - 参数设置和优化指南
   - 回测结果分析方法
   - 回测案例研究和经验总结

4. **指标文档**
   - 技术指标的计算原理
   - 指标参数说明和调优方法
   - 指标的应用场景和信号解读
   - 自定义指标的实现方法

5. **需求文档**
   - 系统功能需求说明
   - 用户界面需求
   - 性能和安全需求
   - 数据处理需求

6. **系统设计文档**
   - 系统架构设计
   - 模块划分和接口设计
   - 数据流程和处理逻辑
   - 扩展性和维护性设计

### 执行自我检查和思考规则

1. **执行前准备**
   - 明确执行目标和预期结果
   - 检查依赖数据是否完备
   - 确认环境变量和配置项设置正确
   - 准备回滚方案，确保可以安全地取消操作

2. **执行中监控**
   - 记录重要执行步骤和中间结果
   - 监控系统资源使用情况（内存、CPU、磁盘I/O）
   - 捕获并记录所有异常和警告信息
   - 设置执行超时机制，防止长时间阻塞

3. **执行后检查**
   - 验证执行结果是否符合预期
   - 检查数据完整性和一致性
   - 确认没有遗留临时文件或中间状态
   - 对比执行前后的关键指标变化

4. **结果分析**
   - 提取关键业务指标并进行分析
   - 总结执行过程中的问题和瓶颈
   - 识别潜在的优化空间和改进方向
   - 评估执行效率，考虑是否需要优化算法或实现

5. **代码审查**
   - 检查实现逻辑是否符合业务需求
   - 确认代码风格符合项目规范
   - 评估代码的可维护性和可扩展性
   - 确保代码中没有敏感信息泄露

6. **学习与改进**
   - 记录执行过程中获得的经验和教训
   - 优化执行流程，减少重复工作
   - 更新文档，确保知识得到沉淀和传承
   - 提出改进建议，促进项目持续发展

7. **通达信公式检查规则**
   - 检查函数调用格式是否符合通达信语法
   - 确认变量引用方式正确（无点语法引用，如不使用KDJ.K而使用K）
   - 验证周期参数设置是否合理
   - 确保条件语句逻辑严谨，避免歧义
   - 检查指标参数设置是否符合计算惯例和最佳实践
   - 验证跨周期引用语法的准确性
   - 确认自定义变量在使用前已正确定义 

### 项目开发工作流程

1. **需求分析阶段**
   - 根据用户初始描述生成详细需求文档
   - 需求文档放置在`doc/需求文档/`目录下
   - 明确系统核心概念、功能需求和系统架构

2. **技术方案设计**
   - 基于需求文档制定详细的技术设计方案
   - 设计方案放置在`doc/系统设计/`目录下
   - 包含核心模块设计、接口定义和数据库设计等技术细节

3. **任务分解**
   - 将系统实现拆解为多个阶段的任务清单
   - 任务安排文档放置在`doc/任务安排/`目录下
   - 设定任务优先级并明确各阶段目标和时间节点

4. **分阶段实现**
   - 按照优先级顺序依次实现各阶段任务
   - 每个阶段完成后创建阶段性标签或版本
   - 保持代码提交粒度适中，每个提交对应一个明确的功能点

5. **阶段评审与代码审查**
   - 每个阶段结束后进行代码审查，检查点包括：
     - 代码规范遵循情况
     - 异常处理完整性
     - 资源管理状况
     - 代码可测试性
     - 性能优化空间
   - 使用统一的代码审查标准和检查清单

6. **问题修复与优化**
   - 根据代码审查发现的问题进行针对性修复
   - 优先修复影响系统稳定性和安全性的问题
   - 记录问题修复过程和解决方案

7. **进度记录与总结**
   - 在`doc/任务安排/进度总结.md`中记录每个阶段的：
     - 完成的工作内容
     - 遇到的主要问题
     - 解决方案和经验总结
     - 下一阶段计划和改进方向
   - 定期更新项目整体进度和状态

8. **文档完善**
   - 随着项目进展持续更新技术文档
   - 完成阶段性功能后更新用户指南
   - 确保代码注释与实际实现保持一致

9. **测试验证**
   - 编写单元测试确保组件功能正确
   - 进行集成测试验证模块间交互
   - 系统测试验证整体功能符合需求

10. **发布部署**
    - 创建发布版本并记录版本变更
    - 提供部署文档和操作手册
    - 收集用户反馈作为下一轮迭代的输入 